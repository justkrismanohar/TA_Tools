

import static org.hamcrest.CoreMatchers.is;
import static org.junit.Assert.*;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;

/**
 * The test class StandingFanTest.
 *
 * @author  (your name)
 * @version (a version number or a date)
 */
public class StandingFanTest
{
    private Device standingFan;
    private static Device sfN,sfM;
    private static int idNumberPart1, idNumberPart2;
    private static String idPrefix;     
    /**
     * Default constructor for test class StandingFanTest
     */
    public StandingFanTest()
    {
     standingFan = new StandingFan();

    }
    
    @Test
    public static void setUpClass(){
        sfN = new StandingFan();
        sfM = new StandingFan(); 
    }
    
    @Test
    public void testSFCreationID(){
    	idPrefix = sfN.getID().substring(0,4);
        assertThat("ID prefix should be SFAN", idPrefix,is("SFAN") );
    }
    
    @Test
    public void testSFCreateIDIncrement(){

        try{
        	String sfID1 = sfN.getID();
            String sfID2 = sfM.getID();
        	idNumberPart1 = Integer.parseInt(sfID1.substring(4,sfID1.length()));
	        idNumberPart2 = Integer.parseInt(sfID2.substring(4,sfID2.length()));
        }
        catch(Throwable t){
        	assertThat("Incorrect SF ID format",false, is(true));
        	return;
        }
        
        assertThat("ID should increment by 1", idNumberPart2, is(idNumberPart1+1));
       
    }
    
     @Test
    public void testStandingFanIsBreezy(){
    	 assertThat("isBreezy() returned false",standingFan.isBreezy(),is(true));
    	 //assertTrue(standingFan.isBreezy());   
    }
    @Test
    public void testStandingFanBreeziness(){  
        assertEquals(2,standingFan.getBreeziness());
    }
    @Test
    public void testStandingFanIsNoisy(){
        assertTrue(standingFan.isNoisy());   
    }
    @Test
    public void testStandingFanNoisiness(){   
        assertEquals(2,standingFan.getNoisiness());
    }
    @Test
    public void testOnOff(){
        assertFalse(standingFan.isOn()); 
        standingFan.turnOn();
        assertTrue(standingFan.isOn()); 
        standingFan.turnOff();
        assertFalse(standingFan.isOn()); 
    }
    @Test
    public void testCools(){
        assertEquals(1,standingFan.coolsBy()); 
    }
    @Test
    public void testIsPortableDevice(){
        assertTrue(standingFan instanceof PortableDevice);
    }
    @Test
    public void testIsDevice(){
        assertTrue(standingFan instanceof Device);
    }
    @Test
    public void testIsFan(){
        assertTrue(standingFan instanceof Fan);
    }
}


