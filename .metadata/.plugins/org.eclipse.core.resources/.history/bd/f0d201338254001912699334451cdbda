

import static org.junit.Assert.*;

import java.util.ArrayList;

import org.hamcrest.core.IsNull;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import static org.hamcrest.CoreMatchers.*;

/**
 * The test class CoolingSimulationTest.
 *
 * @author  (your name)
 * @version (a version number or a date)
 */
public class CoolingSimulationTest
{
    private CoolingSimulation sim;
   
    /**
     * Default constructor for test class CoolingSimulationTest
     */
    public CoolingSimulationTest()
    {
    }

    /**
     * Sets up the test fixture.
     *
     * Called before every test case method.
     */
    @Before
    public void setUp()
    { 
        sim = new CoolingSimulation();
        sim.createRooms();
        sim.createDevices();        
    }

    /**
     * Tears down the test fixture.
     *
     * Called after every test case method.
     */
    @After
    public void tearDown()
    {
    }
    
    @Test
    public void testRoomsCreatedIsNotNull(){
        java.util.ArrayList<Room> rooms = sim.getRooms();
        assertThat("getRomms() returned null", rooms, IsNull.notNullValue());
    }
    
    @Test
    public void testRoomsCreatedLength(){
        java.util.ArrayList<Room> rooms = sim.getRooms();
        try {
        	int length = rooms.size();
        	assertThat("romms.size() is "+ length+" + should be 4)", length, is(4));
        }
        catch(Throwable t){
        	assertThat("getRooms() returned null", true, is(false));
        }
    }
    
    @Test
    public void testDevicesCreatedRoom1(){
        Room r = sim.getRoom(1);
        try{
        	ArrayList<Device> devices = r.getDevices();
        	try{
        		int l = devices.size();
        		assertThat("room 1 has "+ l +" devices should have 5",l, is(5));
        	}//TO DO should really warp this up in a function
        	catch(Throwable t){
        		assertThat("room 1 getDevices() returns null",true,is(false));
        	}
        }
        catch(Throwable t){
        	assertThat("getRoom(1) returns null",true,is(false));
        }
    }
    
    
    @Test
    public void testDevicesCreatedRoom2(){
        Room r = sim.getRoom(2);
        try{
        	ArrayList<Device> devices = r.getDevices();
        	try{
        		int l = devices.size();
        		assertThat("room 2 has "+ l +" devices should have 7",l, is(7));
        	}//TO DO should really warp this up in a function
        	catch(Throwable t){
        		assertThat("room 2 getDevices() returns null",true,is(false));
        	}
        }
        catch(Throwable t){
        	assertThat("getRoom(2) returns null",true,is(false));
        }
    }
    
    @Test
    public void testDevicesCreatedRoom3(){
        Room r = sim.getRoom(3);
        try{
        	ArrayList<Device> devices = r.getDevices();
        	try{
        		int l = devices.size();
        		assertThat("room 3 has "+ l +" devices should have 5",l, is(5));
        	}//TO DO should really warp this up in a function
        	catch(Throwable t){
        		assertThat("room 3 getDevices() returns null",true,is(false));
        	}
        }
        catch(Throwable t){
        	assertThat("getRoom(3) returns null",true,is(false));
        }
    }
    
    @Test
    public void testDevicesCreatedRoom4(){
        Room r = sim.getRoom(4);
        try{
        	ArrayList<Device> devices = r.getDevices();
        	try{
        		int l = devices.size();
        		assertThat("room 4 has "+ l +" devices should have 3",l, is(3));
        	}//TO DO should really warp this up in a function
        	catch(Throwable t){
        		assertThat("room 4 getDevices() returns null",true,is(false));
        	}
        }
        catch(Throwable t){
        	assertThat("getRoom(4) returns null",true,is(false));
        }
    }
    
    
    @Test
    public void testRoom1ConditionsIsNull(){
        sim.coolRoom1();
        Room r = sim.getRoom(1);
        assertThat("getRoom(1) return null after calling coolRoom1()", r, IsNull.notNullValue());
    }
    
    @Test
    public void testRoom2Conditions(){ 
        sim.coolRoom2();
        Room r = sim.getRoom(2);
        assertNotNull(r);
        int temperature = r.getTemperature();
        int breeziness = r.getBreeziness();
        int noisiness = r.getNoisiness();
        assertEquals(25,temperature);
        assertEquals(0,breeziness);
        assertEquals(0,noisiness);
    }
    @Test
    public void testRoom3Conditions(){
        sim.coolRoom3();
        Room r = sim.getRoom(3);
        assertNotNull(r);
        int temperature = r.getTemperature();
        int breeziness = r.getBreeziness();
        int noisiness = r.getNoisiness();
        assertEquals(26,temperature);
        assertEquals(4,breeziness);
        assertEquals(0,noisiness);
    }
    @Test
    public void testRoom4Conditions(){
        sim.coolRoom1();
        sim.coolRoom2();
        sim.coolRoom3();
        sim.coolRoom4();
        Room r4 = sim.getRoom(4);
        assertNotNull(r4);
        int temperature = r4.getTemperature();
        int breeziness = r4.getBreeziness();
        int noisiness = r4.getNoisiness();
        assertEquals(10,temperature);
        assertEquals(16,breeziness);
        assertEquals(14,noisiness);
    }
    
     @Test
    public void testSwapPortableDevices(){
        sim.swapPortableDevices(sim.getRoom(3),sim.getRoom(4));
        assertEquals(5,sim.getRoom(4).getDevices().size());
        sim.coolRoom1();
        sim.swapPortableDevices(sim.getRoom(1),sim.getRoom(4));
        assertEquals(5,sim.getRoom(4).getDevices().size());

    }
   
}
