import java.io.File;
import java.io.FileNotFoundException;
import java.io.FilenameFilter;
import java.io.IOException;
import java.io.RandomAccessFile;
import java.util.Arrays;

import net.sf.sevenzipjbinding.IInArchive;
import net.sf.sevenzipjbinding.SevenZip;
import net.sf.sevenzipjbinding.SevenZipException;
import net.sf.sevenzipjbinding.impl.RandomAccessFileInStream;
import net.sf.sevenzipjbinding.simple.ISimpleInArchiveItem;

public class BatchProcess {

	private interface ItemAction{
		public boolean doAction(File item);
	}
		
	public static void main(String[] args) {
		
		//TO DO: pull from a config file 
		String[] archiveFormats = {"zip","rar",".7z"};
		String[] format = {"java"};
		String sourceDir = "C:\\Users\\krism\\Downloads\\Kris";
		String outputDir = "C:\\Users\\krism\\Projects\\Java\\COMP2603Marker\\output";
		String markingSlipName = "Assignment_1_Makring_Slip-new.xlsx";
		String masterSheetName = "Master.xlsx";
		
		ItemAction validateZip = new ItemAction(){

			@Override
			public boolean doAction(File item) {
		    	if(item.isDirectory())
		    		return performActionInFile(item,this);
		    	else if(isAnAllowedArchive(item.getName(),archiveFormats)){
		    		return openArchive(item.getAbsolutePath());
		    	}
//		    	else{
//			    	System.out.println(item.getName() +" is not an allowed acrhive.");
//			    	return false;
//		    	}
		    	return true;
			}
        	
        };
        
        ItemAction extractArchive = new ItemAction(){

			@Override
			public boolean doAction(File item) {
		    	if(item.isDirectory())
		    		return performActionInFile(item,this);
		    	else if(isAnAllowedArchive(item.getName(),archiveFormats)){
		    		try{
						Extract.extract(outputDir+File.separator+item.getParentFile().getName(), item.getAbsolutePath(),format);
						return true;
					}
					catch(Exception e){
						System.err.println("Error Extracting");
						System.err.println(item.getAbsolutePath());
						e.printStackTrace();
						return false;
					}
		    	}
		    	
		    	return true;
			}
        };
        
        ItemAction markA1 = new ItemAction(){

			@Override
			public boolean doAction(File item) {
				if(item.isDirectory()){
					String filename = markingSlipName;
					A1Marker pm = new A1Marker(item,filename);
					pm.addMarker(new InsertHeader(item.getName()));
					pm.addMarker(new ManualMarker("Booking Class", "BookClass.txt"));
					pm.addMarker(new ManualMarker("Room Class", "RoomClass.txt"));
					pm.addMarker(new ManualMarker("Rental System Class", "RentalSystemClass.txt"));
					pm.addMarker(new ManualMarker("Rental Console Class", "RentalConsoleClass.txt"));
					pm.addMarker(new TestCaseMaker("Working Program and Documentation","TestCases.txt"));
					pm.markAll();
					pm.saveMarkingSlip();
					//should move files to a marked folder so don't accidentally overwrite them
				}
				return true;
			}
        	
        };
        
        ItemAction buildMasterMarkSheet = new ItemAction(){

			@Override
			public boolean doAction(File item) {
				
				if(item.isDirectory()){
					
					String filename = markingSlipName;
					Marksheet markingSlip = new Marksheet(item.getAbsolutePath(), filename, true);
					markingSlip.loadOrCreateSheet(A1Marker.getSheetWithMarksName());
					
					if(!markingSlip.hasText(A1Marker.getFinalTotalPrefix(), 1))
						System.out.print("CEHCK "+ item.getName());
					else{
						A1Marker.getMasterSheet(outputDir, masterSheetName).writeRowln(item.getName(),markingSlip.getTextFromColInLastRow(2));
						System.out.println(item.getName()+" " + markingSlip.getTextFromColInLastRow(2));
					}
					
					markingSlip.close();
				}
				return true;
			}
        	
        };
        
        
		try {
            File file = new File(sourceDir);
           // if(performActionInFile(file,validateZip)){
           // 	System.out.println("All archives OK");
            	//proceed with other actions
           //  	if(performActionInFile(file, extractArchive)){
           // 		System.out.println("All archives extracted OK");
            		//performActionInFile(new File(outputDir), markA1);
            		//performActionInFileFromStartToEnd(new File(outputDir), markA1,34,-1);
            		//System.out.println("Finished Marking");
            performActionInFileFromStartToEnd(new File(outputDir), buildMasterMarkSheet,0,-1);
           // 	}
           // }
           // else{
           // 	System.out.println("Fix archive");
           // 	System.exit(1);
           // }
     
        }catch(Exception e) {
            System.err.println("Error!");
        }

	}
	
	private static boolean openArchive(String archiveFilename) {
        RandomAccessFile randomAccessFile = null;
        IInArchive inArchive = null;
        
        try {        
		    randomAccessFile = new RandomAccessFile(archiveFilename, "r");
		    
		    inArchive = SevenZip.openInArchive(null, // Choose format automatically
		            new RandomAccessFileInStream(randomAccessFile));
		    
		    System.out.println("Opened "+archiveFilename);
		    
		    return true;
        }
        catch (Exception e) {
        	System.err.println(archiveFilename);
            System.err.println("Error occurs: " + e);
            return false;
        } 
        finally {
            if (inArchive != null) {
                try {
                    inArchive.close();
                } catch (SevenZipException e) {
                    System.err.println("Error closing archive: " + e);
                }
            }
            if (randomAccessFile != null) {
                try {
                    randomAccessFile.close();
                } catch (IOException e) {
                    System.err.println("Error closing file: " + e);
                }
            }
        }
	}
	
	private static boolean isAnAllowedArchive(String filename,String[] archiveFormats){
		String[] parts = filename.split("\\.");//escape dot in regex. Otherwise . means any char
		
		int lenght = parts.length;
		if(lenght >0){
			String ext = parts[parts.length-1];	
			for(String allowedFormat : archiveFormats){
				if(ext.equals(allowedFormat))
					return true;
			}
		}
		
		return false;
	}
	
	private static boolean performActionInFileFromStartToEnd(File file, ItemAction action,int startIndex, int endIndex ){
		
		try {
			if(file.isDirectory()){
				int count = startIndex;
				File[] contents = file.listFiles();
				
				if (endIndex == -1){
					//bit messy...but is an internal signal to process all items
					endIndex = contents.length-1;
				}
				
				File item;
				for(int k = startIndex; k < contents.length && k <= endIndex; k++){
					item = contents[k];
					System.out.println("Start folder "+count +" "+item.getName());
					if(!action.doAction(item))
						return false;
					System.out.print ("Completed folder "+count+ " ");
					count++;
				}
				
				
			}
        }catch(Exception e) {
            System.err.println("Error!");
            e.printStackTrace();
            return false;
        }	
		
		return true;
	}
	
	private static boolean performActionInFile(File file, ItemAction action){
		return performActionInFileFromStartToEnd(file, action, 0, -1);//internal signal to do all
	}

}
