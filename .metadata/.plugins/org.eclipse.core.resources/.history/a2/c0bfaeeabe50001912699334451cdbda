package com.ta.core;

import java.io.File;
import javax.tools.JavaCompiler;
import javax.tools.ToolProvider;
import java.lang.Exception;
import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;

public class AutoMarker {
	
	public static Object callMethodOnInstnace(Object instance,Method m,Object... args){
		try {
			if(args == null || args.length == 0)
				return m.invoke(instance);
			return m.invoke(instance, args);
		} catch (IllegalAccessException | IllegalArgumentException | InvocationTargetException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			return null;
		}
	}
	
	public static Object callConstructor(Constructor c, Object... initargs){
		try {
			if(initargs.length == 0)
				return c.newInstance();
			return c.newInstance(initargs);
		} catch (InstantiationException | IllegalAccessException | IllegalArgumentException
				| InvocationTargetException e) {
			e.printStackTrace();
			//should throw and error and stop execution
			return null;
		}
	}
	
	public static Constructor getConstructor(Class c,Class... parameterTypes){
		try {
			return c.getDeclaredConstructor(parameterTypes);
		} 
		catch (NoSuchMethodException | SecurityException e) {}
		
		return null;
	}
	
	public static Method getMethod(Class c, String methodName, Class... parameterTypes){
		try {
			return c.getDeclaredMethod(methodName, parameterTypes);
		} 
		catch (NoSuchMethodException e) {} 
		catch (SecurityException e) {}
		println("Error: " +methodName + " NOT found");
		return null;	
	}
	
	public static Class getClassFromDir(String dir, String className){
		File file = new File(dir+File.separator+className);
		
		
	}
	public static Class getClass(String className){
		try{
			
			return Class.forName(className);
		} 
		catch (ClassNotFoundException e) {}
		//so weird! catching Exception does not work...
		catch (NoClassDefFoundError e2){}
		println("Error : " + className + " NOT found");
		return null;
	}
	  
	public static boolean canComplie(String dirPath,String filename) {
		String sourcePath = dirPath+File.separator+filename;
		JavaCompiler compiler = ToolProvider.getSystemJavaCompiler();
		int compiled = compiler.run(null, null, null, sourcePath);
		if(compiled != 0){
			System.out.println("Compilation Error " + filename);
			return false;
		}
		return true;
	}

	public static boolean checkIfFileExists(String dirPath, String filename){		
		try{
			File dir = new File(dirPath);
			String[] files = dir.list();
		    for(String file : files)
		        if(file.equals(filename))
		            return true;
		    System.out.println(filename + " not found in "+ dirPath);
		    return false;
		}
		catch (Exception e){
			System.out.println("Dir Not found " + dirPath + " cannot search for "+filename);
			return false;
		}
	}

	public static void println(Object thing){
		System.out.println(thing);
	}

}
