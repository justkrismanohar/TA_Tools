import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.RandomAccessFile;
import java.util.Arrays;

import net.sf.sevenzipjbinding.ExtractOperationResult;
import net.sf.sevenzipjbinding.IInArchive;
import net.sf.sevenzipjbinding.ISequentialOutStream;
import net.sf.sevenzipjbinding.SevenZip;
import net.sf.sevenzipjbinding.SevenZipException;
import net.sf.sevenzipjbinding.SevenZipNativeInitializationException;
import net.sf.sevenzipjbinding.impl.RandomAccessFileInStream;
import net.sf.sevenzipjbinding.simple.ISimpleInArchive;
import net.sf.sevenzipjbinding.simple.ISimpleInArchiveItem;


public class Extract {
	
	private static String[] formats = {"java"};
	
	public static void main(String[] args){
		try {
			extract("C:\\Users\\krism\\Projects\\Java\\COMP2603Marker\\src\\output","C:\\Users\\krism\\Projects\\Java\\COMP2603Marker\\src\\test.zip");
		} catch (SevenZipException | FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	
	private static boolean isAnAllowedArchive(String[] archiveFormats, String filename){
		String[] parts = filename.split("\\.");//escape dot in regex. Otherwise . means any char
		
		int lenght = parts.length;
		if(lenght >0){
			String ext = parts[parts.length-1];	
			for(String allowedFormat : archiveFormats){
				if(ext.equals(allowedFormat))
					return true;
			}
		}
		
		return false;
	}
	
    public static void extract(String outputDir, String fileToUnzip) throws SevenZipException, FileNotFoundException {
        try {
            SevenZip.initSevenZipFromPlatformJAR();
            System.out.println("7-Zip-JBinding library was initialized");
            RandomAccessFile randomAccessFile = new RandomAccessFile(fileToUnzip, "r");

            IInArchive inArchive = SevenZip.openInArchive(null, // Choose format
                                                                // automatically
                    new RandomAccessFileInStream(randomAccessFile));
            System.out.println(inArchive.getNumberOfItems());

            // Getting simple interface of the archive inArchive
            ISimpleInArchive simpleInArchive = inArchive.getSimpleInterface();

            System.out.println("   Hash   |    Size    | Filename");
            System.out.println("----------+------------+---------");

            for (ISimpleInArchiveItem item : simpleInArchive.getArchiveItems()) {
                final int[] hash = new int[] { 0 };
                if (!item.isFolder() && isAnAllowedArchive(archiveFormats, item.getPath())) {
                    ExtractOperationResult result;

                    final long[] sizeArray = new long[1];
                    result = item.extractSlow(new ISequentialOutStream() {
                        public int write(byte[] data) throws SevenZipException {
                            //Write to file
                            FileOutputStream fos;
                            //#Blog
                            //https://stackoverflow.com/questions/19403829/decompress-files-with-7z-extension-in-java/19403933#19403933
                            //https://www.javaworld.com/article/2074973/uncompressing-7-zip-files-with-groovy-and-7-zip-jbinding.html
                            try {
                                //File file = new File(item.getPath());
                                File file = new File(outputDir + File.separator + item.getPath());
                            	file.getParentFile().mkdirs();
                                fos = new FileOutputStream(file);
                                fos.write(data);
                                fos.close();

                            } catch (FileNotFoundException e) {
                                // TODO Auto-generated catch block
                                e.printStackTrace();
                            } catch (IOException e) {
                                // TODO Auto-generated catch block
                                e.printStackTrace();
                            }
                        	
                        	hash[0] ^= Arrays.hashCode(data); // Consume data
//                            for (byte b : data) {
//                                System.out.println((char) b);
//                            }
                            sizeArray[0] += data.length;
                            return data.length; // Return amount of consumed                                                // data
                        }
                    });

                    if (result == ExtractOperationResult.OK) {
                        System.out.println(String.format("%9X | %10s | %s", hash[0], sizeArray[0], item.getPath()));
                    } else {
                        System.err.println("Error extracting item: " + result);
                    }
                }
            }

        } catch (SevenZipNativeInitializationException e) {
            e.printStackTrace();
        } 
    	
    }

}