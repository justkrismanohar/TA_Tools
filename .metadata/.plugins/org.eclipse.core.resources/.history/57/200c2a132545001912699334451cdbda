import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.RandomAccessFile;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.Arrays;

import net.sf.sevenzipjbinding.ExtractOperationResult;
import net.sf.sevenzipjbinding.IInArchive;
import net.sf.sevenzipjbinding.ISequentialOutStream;
import net.sf.sevenzipjbinding.SevenZip;
import net.sf.sevenzipjbinding.SevenZipException;
import net.sf.sevenzipjbinding.SevenZipNativeInitializationException;
import net.sf.sevenzipjbinding.impl.RandomAccessFileInStream;
import net.sf.sevenzipjbinding.simple.ISimpleInArchive;
import net.sf.sevenzipjbinding.simple.ISimpleInArchiveItem;


public class Extract {
	
	public static void main(String[] args){
		String[] format = {"java"};
		try {
			extract("C:\\Users\\krism\\Projects\\Java\\COMP2603Marker\\src\\output","C:\\Users\\krism\\Projects\\Java\\COMP2603Marker\\src\\test.zip",format);
		} catch (SevenZipException | FileNotFoundException | NoFileWithValidExtensionFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	
	private static String extractFilename(String path){
		Path p = Paths.get(path);
		return p.getFileName().toString();
	}
	
	
	public static void extract(String outputDir, String fileToUnzip,String[] format) throws SevenZipException, FileNotFoundException, NoFileWithValidExtensionFoundException{
	 
	}
	 
    private static void extractToOutStream(String outputDir, String fileToUnzip,String[] format,ISequentialOutStream outstream) throws SevenZipException, FileNotFoundException, NoFileWithValidExtensionFoundException{
        try {
        	
            SevenZip.initSevenZipFromPlatformJAR();
            System.out.println("7-Zip-JBinding library was initialized");
            RandomAccessFile randomAccessFile = new RandomAccessFile(fileToUnzip, "r");

            IInArchive inArchive = SevenZip.openInArchive(null, // Choose format
                                                                // automatically
                    new RandomAccessFileInStream(randomAccessFile));
            System.out.println(inArchive.getNumberOfItems());

            // Getting simple interface of the archive inArchive
            ISimpleInArchive simpleInArchive = inArchive.getSimpleInterface();

            System.out.println("   Hash   |    Size    | Filename");
            System.out.println("----------+------------+---------");
            int filesExtracted =0;
            
            for (ISimpleInArchiveItem item : simpleInArchive.getArchiveItems()) {
                final int[] hash = new int[] { 0 };
                if (!item.isFolder() && isAnAllowed(item.getPath(), format)) {
                   // String filename = item.getPath();
                    
                	ExtractOperationResult result;

                    final long[] sizeArray = new long[1];
                    result = item.extractSlow(outstream);

                    if (result == ExtractOperationResult.OK) {
                        System.out.println(String.format("%9X | %10s | %s", hash[0], sizeArray[0], item.getPath()));
                        filesExtracted++;
                    } else {
                        System.err.println("Error extracting item: " + result);
                    }
                }
            }
            
            if(filesExtracted == 0){
            	throw new NoFileWithValidExtensionFoundException();
            }

        } catch (SevenZipNativeInitializationException e) {
            e.printStackTrace();
        } 
    	
    }
    
	private static boolean isAnAllowed(String filename,String[] archiveFormats){
		String[] parts = filename.split("\\.");//escape dot in regex. Otherwise . means any char
		
		int lenght = parts.length;
		if(lenght >0){
			String ext = parts[parts.length-1];	
			for(String allowedFormat : archiveFormats){
				if(ext.equals(allowedFormat))
					return true;
			}
		}
		
		return false;
	}

}